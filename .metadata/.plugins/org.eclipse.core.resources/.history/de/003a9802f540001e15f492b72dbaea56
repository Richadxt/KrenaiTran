package com.example.demo.module;

import java.time.ZonedDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.demo.entity.User;
import com.demo.exception.UserException;
import com.demo.model.UserRequest;
import com.demo.model.UserResponse;

@Service
public class UserService {
	
	@Autowired
	private EmployeeRepository userRepository;
	
	public UserResponse registerUser(UserRequest userRequest) throws UserException{
		
		Optional<Employee> existingUser = userRepository.findById(userRequest.getId());
		
		if(existingUser.isPresent()) {
			throw new UserException("Employee already registered with this details!");
		}
		
		UserRequestMapper userRequestMapper = new UserRequestMapper();
		Employee user = userRequestMapper.map(userRequest);
		
		userRepository.save(user);
		
		
		UserResponseMapper userResponseMapper = new UserResponseMapper();
		UserResponse userResponse = userResponseMapper.map(user);
		
		return userResponse;
		
	}
	
	
	public List<Employee> getUserByName(String name) throws UserException {
        List<Employee> users = userRepository.findByName(name);

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserTop3ByAge(Integer num) throws UserException {
        List<Employee> users = userRepository.findTop3ByAge(num);

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserByNameIs(String name) throws UserException {
        List<Employee> users = userRepository.findByNameIs(name);

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserByNameEquals(String name) throws UserException {
        List<Employee> users = userRepository.findByNameEquals(name);

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserByNameIsNot(String name) throws UserException {
        List<Employee> users = userRepository.findByNameIsNot(name);

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserByNameIsNull() throws UserException {
        List<Employee> users = userRepository.findByNameIsNull();

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserByNameIsNotNull() throws UserException {
        List<Employee> users = userRepository.findByNameIsNotNull();

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserByNameStartingWith(String prefix) throws UserException {
        List<Employee> users = userRepository.findByNameStartingWith(prefix);

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserByNameEndingWith(String suffix) throws UserException {
        List<Employee> users = userRepository.findByNameEndingWith(suffix);

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserByNameContaining(String infix) throws UserException {
        List<Employee> users = userRepository.findByNameContaining(infix);

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserByNameLike(String likePattern) throws UserException {
        List<Employee> users = userRepository.findByNameLike(likePattern);

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserByAgeLessThan(Integer age) throws UserException {
        List<Employee> users = userRepository.findByAgeLessThan(age);

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserByAgeLessThanEqual(Integer age) throws UserException {
        List<Employee> users = userRepository.findByAgeLessThanEqual(age);

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserByAgeGreaterThan(Integer age) throws UserException {
        List<Employee> users = userRepository.findByAgeGreaterThan(age);

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserByAgeGreaterThanEqual(Integer age) throws UserException {
        List<Employee> users = userRepository.findByAgeGreaterThanEqual(age);

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserByAgeBetween(Integer startAge, Integer endAge) throws UserException {
        List<Employee> users = userRepository.findByAgeBetween(startAge, endAge);

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserByAgeIn(Collection<Integer> ages) throws UserException {
        List<Employee> users = userRepository.findByAgeIn(ages);

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserByBirthDateAfter(ZonedDateTime birthDate) throws UserException {
        List<Employee> users = userRepository.findByBirthDateAfter(birthDate);

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserByBirthDateBefore(ZonedDateTime birthDate) throws UserException {
        List<Employee> users = userRepository.findByBirthDateBefore(birthDate);

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }

    public List<Employee> getUserByNameOrBirthDate(String name, ZonedDateTime birthDate) throws UserException {
        List<Employee> users = userRepository.findByNameOrBirthDate(name, birthDate);

        if (users.isEmpty()) {
            throw new UserException("No users found!");
        }
        return users;
    }
}
	
	
//    private final UserRepository employeeRepository;
//
//    @Autowired
//    public UserService(UserRepository employeeRepository) {
//        this.employeeRepository = employeeRepository;
//    }
//
//    public List<User> getAllEmployees() {
//        return employeeRepository.findAll();
//    }
//
//    public User getEmployeeById(Long id) {
//        return employeeRepository.findById(id).orElse(null);
//    }
//
//    public User createEmployee(User employee) {
//        return employeeRepository.save(employee);
//    }
//
//    public void updateEmployee(User employee) {
//        employeeRepository.save(employee);
//    }
//
//    public void deleteEmployee(Long id) {
//        employeeRepository.deleteById(id);
//    }
//    
//// ################################################################3
//    
//        public List<User> findByName(String name) {
//            return employeeRepository.findByName(name);
//        }
//
//        public List<User> findTop3ByAge() {
//            return employeeRepository.findTop3ByAge();
//        }
//
//        public List<User> findByNameIs(String name) {
//            return employeeRepository.findByNameIs(name);
//        }
//        
//        public List<User> findByNameEquals (String name) {
//            return employeeRepository.findByNameEquals(name);
//        }
//        
//        public List<User> findByNameIsNot(String name) {
//            return employeeRepository.findByNameIsNot(name);
//        }
//        
//        public List<User> findByNameIsNull () {
//            return employeeRepository.findByNameIsNull();
//        }
//        
//        public List<User> findByNameIsNotNull () {
//            return employeeRepository.findByNameIsNotNull();
//        }
//        
//        public List<User> findByNameStartingWith (String prefix){
//            return employeeRepository.findByNameStartingWith(prefix);
//        }
//        
//        public List<User> findByNameEndingWith (String suffix) {
//            return employeeRepository.findByNameEndingWith(suffix);
//        }
//        
//        public List<User> findByNameContaining (String infix){
//            return employeeRepository.findByNameContaining(infix);
//        }
//        
//        public List<User> findByNameLike (String likePattern) {
//            return employeeRepository.findByNameLike(likePattern);
//        }
//        
//        public List<User> findByAgeLessThan (Integer age) {
//            return employeeRepository.findByAgeLessThan(age);
//        }
//        
//        public List<User> findByAgeLessThanEqual (Integer age){
//            return employeeRepository.findByAgeLessThanEqual(age);
//        }
//        
//        public List<User> findByAgeGreaterThan (Integer age){
//            return employeeRepository.findByAgeGreaterThan(age);
//        }
//        
//        public List<User> findByAgeGreaterThanEqual (Integer age) {
//            return employeeRepository.findByAgeGreaterThanEqual(age);
//        }
//        
//        public List<User> findByAgeBetween (Integer startAge, Integer endAge){
//            return employeeRepository.findByAgeBetween(startAge, endAge);
//        }
//
//        public List<User> findByAgeIn(Collection<Integer> ages) {
//            return employeeRepository.findByAgeIn(ages);
//        }
//
//        public List<User> findByBirthDateAfter(ZonedDateTime birthDate) {
//            return employeeRepository.findByBirthDateAfter(birthDate);
//        }
//
//        public List<User> findByBirthDateBefore(ZonedDateTime birthDate) {
//            return employeeRepository.findByBirthDateBefore(birthDate);
//        }
//
//        public List<User> findByNameOrBirthDate(String name, ZonedDateTime birthDate) {
//            return employeeRepository.findByNameOrBirthDate(name, birthDate);
//        }
//
//        public List<User> findByNameOrBirthDateAndActive(String name, ZonedDateTime birthDate, Boolean active) {
//        	return employeeRepository.findByNameOrBirthDateAndActive(name, birthDate, active);
//        }
//  
//}
